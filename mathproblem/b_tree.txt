B-trees are balance search trees designed to work well on disks or other direct-access secondary storage advices. B-trees are similar to red-black trees, but they are better at minimizing disk I/O operations. Many database systems use B-trees, or variants of B-Trees, to store information.
B-Trees differ from red-black trees in that B-Tree nodes may have many chlidren, from a few to thousands. That is, the "branching factor" of a B-tree can be quite large, although it useually depends on characteristics of the disk unit used. B-trees differ from red-black trees in that B-tree nodes may have many children, from a few to thousands. That is, the "branching factor" of a B-tree can be quite large, although it useually depends on characteristics of the disk unit used. B-trees exact height of a B-tree can be considerably less than that of a red-black tree, however, because its branching factor.

pseudocode

B-TREE-SEARCH(x, k) {
	i = 1;
	while (i <= x.n and k > x.key[i]) {
		i = i + 1;
	}
	if (i <= x.n and k == x.key[i]) {
		return (x, i);
	} else if (x.leaf) {
		return NIL;
	} else {
		DISK-READ(x.c[i]);
		return B-TREE-SEARCH(x.c[i], k);
	}
}

B-TREE-CREATE(T) {
	x = ALLOCATE-NODE();
	x.leaf = TRUE;
	x.n = 0;
	DISK-WRITE(x);
	T.root = x;
}

Inserting a key into a B-Tree is significantly more complicated than inserting a key into a binary search tree. As with binary search trees, we search for the leaf position at which to insert the new key. With a B-Tree, however, we cannot simply create a new leaf node and insert in, as the resulting tree would fail to be a valid B-tree.

B-TREE-SPLIT-CHLID(x, i) {
	z = ALLOCATE-NODE();
	y = x.c[i];
	z.leaf = y.leaf;
	z.n = t - 1;
	for (j = 1; j <= t - 1; j ++) {
		z.key[j] = y.key[j+t];
	}
	if (!y.leaf) {
		for (j = 1; j <= t; j ++) {
			z.c[j] = y.c[j+t];
		}
	}
	y.n = t - 1;
	for (j = x.n + 1; j >= i + 1; j --) {
		x.c[j+1] = x.c[j];
	}
	x.c[i+1] = z;
	for (j = x.n; j >= i; j --) {
		x.key[j+1] = x.key[j];
	}
	x.key[i] = y.key[t];
	x.n = x.n + 1;
	DISK-WRITE(y);
	DISK-WRITE(z);
	DISK-WRITE(x);
}

B-TREE-INSERT(T, k) {
	r = T.root;
	if (r.n == 2t - 1) {
		s = ALLOCATE-NODE();
		T.root = s;
		s.leaf = FALSE;
		s.n = 0;
		s.c[1] = r;
		B-TREE-INSERT-NONFULL(s, k);
	} else {
		B-TREE-INSERT-NONFULL(r, k);
	}
}

B-TREE-INSERT-NONFULL(x, k) {
	i = x.n;
	if (x.leaf) {
		while (i >= 1 && k < x.key[i]) {
			x.key[i+1] = x.key[i];
			i = i - 1;
		}
		x.key[i+1] = k;
		x.n = x.n + 1;
		DISK-WRITE(x);
	} else {
		while (i >= 1 && k < x.key[i]) {
			i = i - 1;
		}
		i = i + 1;
		DISK-READ(x.c[i]);
		if (x.c[i].n == 2t - 1) {
			B-TREE-SPLIT-CHILD(x, i);
			if (k > x.key[i]) {
				i = i + 1;
			}
		}
		B-TREE-INSERT-NONFULL(x.c[i], k);
	}
}

B-TREE-DELETE procedure
1. If the key k is in node x and x is a leaf, delete the key k from x.
2. If the key k is in node x and x is an internal node, do the follwing:
	a. If the child y tha precedes k in node x has at least t keys, then find 
	the predecessor k' of k in the subtree rooted at y. Recursively delete k', 
	and replace k by k' in x. (We can find k' and delete it in a single downward
	pass.)
	b. If y has fewer than t keys, then symmetrically, examine the child z that 
	follows k in node x. If z has at least t keys, then find the successor k' of
	k in the subtree rooted at z. Recursively delete k' and replace k by k' in 
	x. (We can find k' and delete it in a single downward pass.)
	c. Otherwise, if both y and z have only t-1 keys, merge k and all of z into
	y, so that x loses both k and the pointer to z, and y now contains 2t-1 
	keys. Then free z and recursively delete k from y.
3. If the key k is not present in internal node x, determine the root x.c[i] of 
the appropriate subtree that must contain k, if k is in the tree at all. 
If x.c[i] of has only t-1 keys, execute step 3a or 3b as necessary to guarantee
that we descend to a node containing at least t keys. Then finish by recursing
on the appropriate child of x.
	a. If x.c[i] has only t-1 keys but has an immediate sibling with at least t 
	keys, give x.c[i] an extra key by moving a key from x down into x.c[i], 
	moving a key from x.c[i]'s immediate left or right sibling up into x, and 
	moving the appropriate child pointer from the sibling into x.c[i].
	b. If x.c[i] and both of x.c[i]'s immediate siblings have t-1 keys, merge 
	x.c[i] with one siblin, which involves moving a key from x down into the new
	merged node to become the median key for that node.
